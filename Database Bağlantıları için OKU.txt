Burada Database bağlantılarını anlatıyorum: 
database bağlantıları için öncelikle MongoDB' de bir cluster oluşturuyoruz..

daha sonra bu cluster bağlantısını alıyoruz ve env dosyası oluşturarak env dosyası içerisine bu bağlantıyı ekliyoruz.
eklediğimiz bağlantıda username ve password yazan kısımlara cluster oluştururken girmiş olduğumuz kullanıcı adı ve şifreyi yazıyoruz.


sonra yapılması gerekenler : 
mongodb, nodemon ve mongoose gibi paketleri terminal npm aracılığıyla eklemek..


lib adında klasör oluşturarak bu lib klasörü içerisine db.js adında bir dosya açıyoruz ve içine aşağıdaki kodu ekliyoruz. 
burada dikkat etmemiz gereken şey uri kısmına env dosyası içersindeki db bağlantısı eklenmeli : 

{
import { MongoClient } from "mongodb";

const uri = process.env.MONGODB_URI; // MongoDB bağlantı URL'sini burada belirtin
const options = {
  useNewUrlParser: true,
  useUnifiedTopology: true,
};

let client;
let clientPromise;

if (!clientPromise) {
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}

export default clientPromise;
}

sonrasında mongodb.ts dosyası oluşturarak içerisine aşağıdaki kodu yapıştırıyoruz.. yine uri önemli: 

{
    import { MongoClient } from "mongodb";

if (!process.env.MONGODB_URI) {
  throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');
}

const uri = process.env.MONGODB_URI;
const options = {};

let client;
let clientPromise;

if (process.env.NODE_ENV === "development") {
  // In development mode, use a global variable so that the value
  // is preserved across module reloads caused by HMR (Hot Module Replacement).
  if (!global._mongoClientPromise) {
    client = new MongoClient(uri, options);
    global._mongoClientPromise = client.connect();
  }
  clientPromise = global._mongoClientPromise;
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}

// Export a module-scoped MongoClient promise. By doing this in a
// separate module, the client can be shared across functions.
export default clientPromise;

}

sonrasında mongoose.js dosyasını oluşturarak içerisine database bağlantısı için kullanacağımız bir operatör olan
 mongooseConnect fonksiyonunu ekliyoruz : 

 {
    import mongoose from "mongoose";

export function mongooseConnect() {
  if (mongoose.connection.readyState === 1) {
    return mongoose.connection.asPromise();
  } else {
    const uri = process.env.MONGODB_URI;
    return mongoose.connect(uri);
  }
}

 }

 burada yine uri kısmında env'deki linkimiz gelecek...


devamında Models klasörü oluşturarak models klasör içerisinde şemalarımızı oluşturuyoruz: 

oluşturmamız gereken şemalarla ilgili küçük bir örnek aşağıdaki gibidir : 

{
    import mongoose, { Schema, model, models } from "mongoose";

const CommentSchema = new Schema(
  {
    blogId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Blog",
      required: true,
    },
    authorId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    text: {
      type: String,
      required: true,
    },
    blog: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Blog",
    },
  },
  { timestamps: true }
);

export const Comment = models.Comment || model("Comment", CommentSchema);

}


sonrasında api klasörünün içine girerek bir api oluşturuyoruz. örnek olarak blogs apisinin kodlarını ekleyelim... :

{
    import { mongooseConnect } from "@/lib/mongoose";
import { Blog } from "@/models/Blog";
import { verifyJwtToken } from "@/lib/jwt";

export default async function handler(req, res) {
  const { method } = req;
  await mongooseConnect();

  const accessToken = req.headers.authorization;
  const token = accessToken?.split(" ")[1];

  const decodedToken = verifyJwtToken(token);

  //   if (!accessToken || !decodedToken) {
  //     throw new Error("Lütfen giriş yapınız");
  //   }

  if (method === "GET") {
    if (req.query.id) {
      res.json(await Blog.findById(req.query.id));
    } else {
      res.json(await Blog.find());
    }
  }

  try {
    if (method === "POST") {
      const { title, description, imageUrl, authorId } = req.body;

      if (!accessToken || !decodedToken) {
        throw new Error("Lütfen giriş yapınız");
      } else {
        const BlogDoc = await Blog.create({
          title,
          description,
          imageUrl,
          authorId,
        });
        res.json(BlogDoc);
      }
    }
  } catch (error) {
    res.status(403).json({ error: error.message });
  }
  try {
    if (method === "PUT") {
      const { title, description, imageUrl, authorId, _id } = req.body;
      if (!accessToken || !decodedToken) {
        throw new Error("Lütfen giriş yapınız");
      } else {
        await Blog.updateOne(
          { _id },
          {
            title,
            description,
            imageUrl,
            authorId,
          }
        );
        res.json(true);
      }
    }
  } catch (error) {
    res.status(403).json({ error: error.message });
  }

  if (method === "DELETE") {
    if (req.query?.id) {
      await Blog.deleteOne({ _id: req.query?.id });
      res.json(true);
    }
  }
}

}

evet apileri de oluşturduğumuza göre göndereceğimiz isteklere sıra geldi.
bunun için axios paketini kuruyoruz. sonrasında axios.get veya axios.post şeklinde isteklerimizi gönderebiliyoruz..
<--------------------------------------------- Database Kurulumu Bu Kadar ------------------------------------------------>


<----------------------------------------------------NEXTAUTH CREDENTIALS-------------------------------------------------->

öncelikle nextauth npm paketini yüklüyoruz..
sonrasında api içerisinde /auth/[...nextauth].js adında klasör oluşturuyoruz..

[...nextauth].js dosyası içerisinde aşağıdaki şekilde kod ekliyoruz: 


{
    import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import User from "@/models/User";
import { signJwtToken, signRefreshToken, verifyRefreshToken } from "@/lib/jwt";
import bcrypt from "bcrypt";

export const authOptions = {
  providers: [
    CredentialsProvider({
      type: "credentials",
      credentials: {
        username: { label: "Username", type: "text", placeholder: "Username" },
        password: { label: "Password", type: "text", placeholder: "Password" },
      },
      async authorize(credentials, req) {
        const { email, password } = credentials;

        const user = await User.findOne({ email });

        if (!user) {
          throw new Error("Invalid input");
        }

        const comparePass = await bcrypt.compare(password, user.password);

        if (comparePass) {
          const { password, ...currentUser } = user._doc;
          const accessToken = signJwtToken(currentUser, { expiresIn: "7d" });
          const refreshToken = signRefreshToken(currentUser, {
            expiresIn: "1d",
          });

          return {
            ...currentUser,
            accessToken,
            refreshToken,
          };
        } else {
          throw new Error("Invalid password");
        }
      },
    }),
  ],
  pages: {
    signIn: "/login",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.accessToken = user.accessToken;
        token.refreshToken = user.refreshToken;
        token._id = user._id;
      }

      // Refresh token kontrolü
      if (token && token.refreshToken) {
        const isRefreshTokenValid = verifyRefreshToken(token.refreshToken);
        if (!isRefreshTokenValid) {
          // Refresh token süresi dolduğunda otomatik çıkış yap
          throw new Error("Refresh token expired");
        }
      }

      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user._id = token._id;
        session.user.accessToken = token.accessToken;
        session.user.refreshToken = token.refreshToken;
      }

      return session;
    },
  },
};

export default NextAuth(authOptions);

}
 bu şekilde giriş doğrulama işlemlerini yapmış oluyoruz... bundan sonra yapacağımız tek şey login sayfasında () => signIn("credentials", data)
şeklinde veri göndermek olacak... 

******** ÖNEMLİ *******
burada neyi hatalı yaptığımı bilmiyorum session süresi çok kısa ve herhangi bir server isteğinde oturum kapanıyor. 
bunu düzeltmem gerekiyor.. düzeltince düzeltilmiş kodu mutlaka buraya yazmalıyım..